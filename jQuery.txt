jQuery 入口函数：
$(document).ready(function()){

}
$(function(){
    alert("hello workd");
})

上面这两种写法一样。


原生js和jQuery入口函数的加载模式不同
通过原生js入口函数可以拿到DOM元素的宽高
通过jQuery入口函数不可以拿到DOM元素的宽高
原生js会等到DOM元素加载完毕并且图片也加载完毕才会执行
jQuery会等到DOM元素加载完毕，但不会等到图片也加载完毕就会执行

原生的js如果编写了多个入口函数，后面编写的会覆盖前面的，而jQuery不会

1.释放$的使用权
    jQuery.noConflict();
    注意点：释放操作必须在编写其他jQuery代码之前，释放之后就不能再使用$了，改为使用jQuery.

2.自定义快捷访问符号
    var jq = jQuery.noConflict();

jQuery的核心函数

    $();就代表调用jQuery的核心函数

        1.接受一个函数
            $(function(){
                alert();
            })  //返回一个jQuery对象，对象中保存了找到的DOM元素

        2.接受一个字符串
            2.1 接收一个字符串选择器
                var $box1 = $(".box1"); //返回一个jQuery对象，对象中保存了找到的DOM元素

            2.2接收一个代码片段
                var $p = $("<p>我是段落</p>"); jQuery会根据传进去的代码片段参数生成一个html元素，
                返回一个jQuery对象，对象中保存了找到的DOM元素

        3.接受一个DOM元素
            接收到的DOM元素会被jQuery包装成一个jQuery对象返回给我们。

        
    [ jQuery对象其实是一个伪数组。]

        什么是伪数组: 有0-length-1的属性，并且有length属性


静态方法和实例方法:


js的原生forEach方法，只能遍历真数组，不能遍历伪数组

    利用jQuery的each静态方法遍历数组：
        第一个参数: 当前遍历到的索引
        第二个参数: 遍历到的元素
    注意点: jQuery的each方法是可以遍历伪数组的。


原生js中的map,each和jQuery中的map,each有什么区别?

利用原生JS的map方法遍历
第一个参数: 当前遍历到的元素
第二个参数: 当前遍历到的索引
第三个参数: 当前遍历到的数组

arr.map(function(value, index, array){
    console.log(value, index, array);
})

原生js中的map和原生js中的foreach一样，不能遍历伪数组。

$.map(arr, function(value, index){
    console.log(index, value);
})

第一个参数: 要遍历的数组
第二个参数: 每遍历一个元素之后执行的回调函数
    回调函数的参数：

        第一个参数: 遍历到的元素
        第二个参数: 遍历到的索引

var res=$.map(obj, function(value, index){
    console.log(index, value);
})

var res=$.each(obj, function(value, index){
    console.log(index, value);
})

/* jQuery中的each静态方法和map静态方法的区别:
    each静态方法默认的返回值就是要遍历的元素，也就是第一个参数
    而map静态方法默认的返回值是一个空数组。
    each静态方法不支持在回调函数中对遍历的数组进行处理，而map静态方法可以在回调函数中通过return对遍历的数组进行处理，然后生成一个
    新的数组返回。
*/

jQuery中的其他静态方法:

    1.$.trim()
        作用: 去除字符串两端的空格
        参数: 需要去除空格的字符串
        返回值: 去除空格之后的字符串

    2.$.isWindow();
        作用: 判断传入的对象是不是window对象。
        返回值 true/false

    3.$.isArray();
        作用: 判断传入的对象是不是array。
        返回值 true/false
        

    2.$.isFunction();
        作用: 判断传入的对象是不是function。
        返回值 true/false

        注意点：jQuery框架本质上是一个函数, 也就是说$.isFunction(jQuery) = true;

        